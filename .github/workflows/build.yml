name: BUILD

on:
  push:
  schedule:
    - cron: "0 16 * * *"

jobs:
  buildAUR:
    strategy:
      matrix:
        repos: [
            clash-for-windows-bin,
            jetbrains-toolbox,
            streamlink-twitch-gui-bin,
            visual-studio-code-bin,
            watt-toolkit-bin,
            wps-office,
            wps-office-mui-zh-cn,
            # obs-studio-tytan652 dependencies
            cef-minimal-obs-bin,
            ffmpeg-obs,
            vlc-luajit,
          ]
        include:
          - repos: clash-for-windows-bin
            preinstall-pkgs: "at-spi2-core"
          - repos: streamlink-twitch-gui-bin
            preinstall-pkgs: "at-spi2-core"
          - repos: visual-studio-code-bin
            preinstall-pkgs: "at-spi2-core"
      fail-fast: false

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: ./build-aur-action
        with:
          repo-name: ${{ matrix.repos }}
          preinstallPkgs: ${{ matrix.preinstall-pkgs }}

      - uses: actions/upload-artifact@v3
        with:
          path: ./*/*.pkg.tar.zst
          name: ${{ matrix.repos }}
          if-no-files-found: error

      - uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: "packages"
          artifacts: "./*/*.zst"
          token: ${{ secrets.GITHUB_TOKEN }}

  #  buildNonAUR:
  #    strategy:
  #      matrix:
  #        PKGBUILDs: [breeze10, python-octodns, python-pyclipper]
  #
  #      fail-fast: false
  #
  #    runs-on: ubuntu-latest
  #
  #    steps:
  #      - uses: actions/checkout@v3
  #
  #      - name: Build Non-AUR packages
  #        id: makepkg
  #        uses: ./build-nonaur-action
  #        with:
  #          pkgdir: ${{ matrix.PKGBUILDs }}
  #          aurDeps: true
  #
  #      - uses: actions/upload-artifact@v3
  #        with:
  #          path: ./*/*.pkg.tar.zst
  #          name: ${{ matrix.PKGBUILDs }}
  #          if-no-files-found: error
  #
  #      - uses: ncipollo/release-action@v1
  #        with:
  #          allowUpdates: true
  #          tag: "packages"
  #          artifacts: ${{ steps.makepkg.outputs.pkgfile0 }}
  #          token: ${{ secrets.GITHUB_TOKEN }}

  uploadToOneDrive:
    runs-on: ubuntu-latest
    if: always()
    #needs: [buildAUR, buildNonAUR]
    needs: [buildAUR]

    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        id: download

      - uses: ./create-db-and-upload-action
        with:
          RCLONE_ONEDRIVE_CLIENT_ID: ${{ secrets.RCLONE_ONEDRIVE_CLIENT_ID }}
          RCLONE_ONEDRIVE_CLIENT_SECRET: ${{ secrets.RCLONE_ONEDRIVE_CLIENT_SECRET }}
          RCLONE_ONEDRIVE_REGION: global
          RCLONE_ONEDRIVE_TOKEN: ${{ secrets.RCLONE_ONEDRIVE_TOKEN }}
          RCLONE_ONEDRIVE_DRIVE_ID: ${{ secrets.RCLONE_ONEDRIVE_DRIVE_ID }}
          RCLONE_ONEDRIVE_DRIVE_TYPE: personal
          dest_path: /archrepo
          repo_name: eliot
          gpg-privatekey: ${{ secrets.gpg_private_key }}
          local_path: ${{ steps.download.outputs.download-path }}
